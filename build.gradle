plugins {
    id 'org.javamodularity.moduleplugin' version '1.6.0' apply false
}

import org.apache.tools.ant.taskdefs.condition.Os

subprojects { subProject ->
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'org.javamodularity.moduleplugin'

    group = 'cz.rict.carcassonne.classic'
    
    sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '11'

    repositories {
        jcenter()
        mavenCentral()
    }
    
    subProject.ext.log4jVersion = "2.13.0"
    subProject.ext.fastutilVersion = "8.3.0"

    dependencies {
        implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
        implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
        implementation "it.unimi.dsi:fastutil:$fastutilVersion"

        testImplementation 'junit:junit:4.12'
    }
    
    eclipse {
        classpath {
            containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
            file {
                whenMerged {
                    entries.findAll {
                        (it.properties.kind.equals('lib') && !it.properties.path.contains("junit")) ||
                        it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') ||
                        (it.properties.kind.equals('src') && it.properties.path.equals("/base"))
                    }.each {
                        it.entryAttributes['module'] = 'true'
                    }
                    /* entries.findAll{true}.each{
                        println it.properties.kind
                        println it.properties.path
                    } */
                }
            }
        }
    }

    if (subProject.name != 'base') {
        dependencies {
            implementation project(':base')
        }

        tasks.withType(Jar) {
            destinationDirectory = file("$rootDir/run/mods/")
        }
    }
    else
    {
        subProject.ext.lwjglVersion = "3.2.1"
        subProject.ext.lwjglNatives = Os.isFamily(Os.FAMILY_WINDOWS) ? "natives-windows" : (Os.isFamily(Os.FAMILY_MAC) ? "natives-macos" : "natives-linux")

        dependencies {
            implementation "org.lwjgl:lwjgl:$lwjglVersion"
            implementation "org.lwjgl:lwjgl-assimp:$lwjglVersion"
            implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
            implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
            implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
            implementation "org.lwjgl:lwjgl-stb:$lwjglVersion"
            runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-assimp:$lwjglVersion:$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
        }

        processResources {
            filesMatching('META-INF/dependencies.cfg') {
                expand 'lwjglNatives': "\$lwjglNatives", 'lwjglVersion': subProject.ext.lwjglVersion, 'log4jVersion': subProject.ext.log4jVersion, 'fastutilVersion': subProject.ext.fastutilVersion
            }
        }

        tasks.withType(Jar) {
            destinationDirectory = file("$rootDir/run/")
        }
    }
}
